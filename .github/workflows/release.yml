name: Release
on:
  push:
    tags:
      - '**'
    branches-ignore:
      - '**'
env:
  DOCKER_BUILDKIT: 1
jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-user qemu-user-static
      - name: Bazel Build Image
        run: |
          docker build \
            --cache-from emacski/tensorflow-serving-arm-client:latest-devel \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t emacski/tensorflow-serving-arm-client:latest-devel \
            -f tools/docker/Dockerfile .
      - name: Bazel Build Cache
        id: bazel-cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/bazel
          key: bazel-cache
      - name: Bazel Build
        run: |
          docker run --rm -v ${HOME}/.cache/bazel:/root/.cache/bazel --entrypoint chown emacski/tensorflow-serving-arm-client:latest-devel -R root:root /root/.cache/bazel
          tools/ci/bazel.sh run --spawn_strategy=local --config=release //python/wheel:build_pure
          tools/ci/bazel.sh run --spawn_strategy=local --config=release --config=linux_amd64 //python/wheel:build_platform
          tools/ci/bazel.sh run --spawn_strategy=local --config=release --config=linux_arm64 //python/wheel:build_platform
          tools/ci/bazel.sh run --spawn_strategy=local --config=release --config=linux_arm //python/wheel:build_platform
          sudo chown -R $(whoami):$(whoami) ${HOME}/.cache/bazel
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Get Tag Name
        shell: bash
        run: echo "##[set-output name=name;]$(echo ${GITHUB_REF##*/})"
        id: get_tag
      - name: Upload Release Asset (pure)
        id: upload-release-asset-pure
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tensorflow_serving_arm_client-${{ steps.get_tag.outputs.name }}-py3-none-any.whl
          asset_name: tensorflow_serving_arm_client-${{ steps.get_tag.outputs.name }}-py3-none-any.whl
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (cp37_linux_amd64)
        id: upload-release-cp37-linux-amd64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tensorflow_serving_arm_client-${{ steps.get_tag.outputs.name }}-cp37-none-manylinux2014_x86_64.whl
          asset_name: tensorflow_serving_arm_client-${{ steps.get_tag.outputs.name }}-cp37-none-manylinux2014_x86_64.whl
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (cp37_linux_arm64)
        id: upload-release-assets-cp37-linux-arm64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tensorflow_serving_arm_client-${{ steps.get_tag.outputs.name }}-cp37-none-manylinux2014_aarch64.whl
          asset_name: tensorflow_serving_arm_client-${{ steps.get_tag.outputs.name }}-cp37-none-manylinux2014_aarch64.whl
          asset_content_type: application/octet-stream
      - name: Upload Release Asset (cp37_linux_arm)
        id: upload-release-assets-cp37-linux-arm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./tensorflow_serving_arm_client-${{ steps.get_tag.outputs.name }}-cp37-none-manylinux2014_armv7l.whl
          asset_name: tensorflow_serving_arm_client-${{ steps.get_tag.outputs.name }}-cp37-none-manylinux2014_armv7l.whl
          asset_content_type: application/octet-stream
      - name: Publish Build Image
        env:
          REGISTRY_USER: ${{ secrets.DockerHubUser }}
          REGISTRY_PASS: ${{ secrets.DockerHubToken }}
        run: |
          echo "$REGISTRY_PASS" | docker login -u "$REGISTRY_USER" --password-stdin || true
          docker push emacski/tensorflow-serving-arm-client:latest-devel
